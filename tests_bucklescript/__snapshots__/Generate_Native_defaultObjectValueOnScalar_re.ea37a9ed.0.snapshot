Generate Native › defaultObjectValueOnScalar.re › output
[@ocaml.ppx.context
  {
    tool_name: \"migrate_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module MyQuery: {
  module Raw: {
    type t;
    type t_variables;
  };
  type t = {defaultObjectValueOnScalar: string};
  type t_variables;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t = Yojson.Basic.t;
    type t_variables = Yojson.Basic.t;
  };
  type t = {defaultObjectValueOnScalar: string};
  type t_variables = Yojson.Basic.t;
  let query = \"query   {\\ndefaultObjectValueOnScalar(filter: {some: {json: \\\"value\\\"}}, arg: {field: \\\"otherValue\\\"})  \\n}\\n\";
  let parse: Raw.t => t =
    (value) => (
      {
        defaultObjectValueOnScalar: {
          let value =
            Yojson.Basic.Util.member(\"defaultObjectValueOnScalar\", value);
          Yojson.Basic.Util.to_string(value);
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let defaultObjectValueOnScalar = {
        let value = (value: t).defaultObjectValueOnScalar;
        value;
      };
      `Assoc([(\"defaultObjectValueOnScalar\", defaultObjectValueOnScalar)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => `Null;
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};

