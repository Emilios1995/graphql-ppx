Generate Native › tagged_template.re › output
[@ocaml.ppx.context
  {
    tool_name: \"migrate_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module GraphQL_PPX = {
  let deepMerge = (json1, _) => json1;
};
module MyQuery: {
  module Raw: {
    type t;
    type t_variables;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => unit;
  let makeVariables: unit => unit;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t = Yojson.Basic.json;
    type t_variables = Yojson.Basic.json;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  let query: string = [%raw
    \"graphql`\\n  query   {\\n    variousScalars  {\\n      nullableString\\n      string\\n      nullableInt\\n      int\\n      nullableFloat\\n      float\\n      nullableBoolean\\n      boolean\\n      nullableID\\n      id\\n    }\\n  }\\n`\"
  ];
  let parse: Raw.t => t =
    (value) => (
      {
        variousScalars: {
          let value = Yojson.Basic.member(\"variousScalars\", value);
          (
            {
              nullableString: {
                let value = Yojson.Basic.member(\"nullableString\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_string(value))
                | `Null => None
                };
              },
              string: {
                let value = Yojson.Basic.member(\"string\", value);
                Yojson.Basic.to_string(value);
              },
              nullableInt: {
                let value = Yojson.Basic.member(\"nullableInt\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_int(value))
                | `Null => None
                };
              },
              int: {
                let value = Yojson.Basic.member(\"int\", value);
                Yojson.Basic.to_int(value);
              },
              nullableFloat: {
                let value = Yojson.Basic.member(\"nullableFloat\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_float(value))
                | `Null => None
                };
              },
              float: {
                let value = Yojson.Basic.member(\"float\", value);
                Yojson.Basic.to_float(value);
              },
              nullableBoolean: {
                let value = Yojson.Basic.member(\"nullableBoolean\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_bool(value))
                | `Null => None
                };
              },
              boolean: {
                let value = Yojson.Basic.member(\"boolean\", value);
                Yojson.Basic.to_bool(value);
              },
              nullableID: {
                let value = Yojson.Basic.member(\"nullableID\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_string(value))
                | `Null => None
                };
              },
              id: {
                let value = Yojson.Basic.member(\"id\", value);
                Yojson.Basic.to_string(value);
              },
            }: t_variousScalars
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let variousScalars = {
        let value = (value: t).variousScalars;
        let id = {
          let value = (value: t_variousScalars).id;
          value;
        }
        and nullableID = {
          let value = (value: t_variousScalars).nullableID;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and boolean = {
          let value = (value: t_variousScalars).boolean;
          value;
        }
        and nullableBoolean = {
          let value = (value: t_variousScalars).nullableBoolean;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and float = {
          let value = (value: t_variousScalars).float;
          value;
        }
        and nullableFloat = {
          let value = (value: t_variousScalars).nullableFloat;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and int = {
          let value = (value: t_variousScalars).int;
          value;
        }
        and nullableInt = {
          let value = (value: t_variousScalars).nullableInt;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and string = {
          let value = (value: t_variousScalars).string;
          value;
        }
        and nullableString = {
          let value = (value: t_variousScalars).nullableString;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        };
        {
          nullableString,
          string,
          nullableInt,
          int,
          nullableFloat,
          float,
          nullableBoolean,
          boolean,
          nullableID,
          id,
        };
      };
      {variousScalars: variousScalars};
    };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};

module MyTypes = {
  type query;
};
module MyQuery1a: {
  module Raw: {
    type t;
    type t_variables;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  /** The GraphQL query */
  let query: MyTypes.query;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => unit;
  let makeVariables: unit => unit;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t = Yojson.Basic.json;
    type t_variables = Yojson.Basic.json;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  let query: MyTypes.query = [%raw
    \"graphql`\\n  query   {\\n    variousScalars  {\\n      nullableString\\n      string\\n      nullableInt\\n      int\\n      nullableFloat\\n      float\\n      nullableBoolean\\n      boolean\\n      nullableID\\n      id\\n    }\\n  }\\n`\"
  ];
  let parse: Raw.t => t =
    (value) => (
      {
        variousScalars: {
          let value = Yojson.Basic.member(\"variousScalars\", value);
          (
            {
              nullableString: {
                let value = Yojson.Basic.member(\"nullableString\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_string(value))
                | `Null => None
                };
              },
              string: {
                let value = Yojson.Basic.member(\"string\", value);
                Yojson.Basic.to_string(value);
              },
              nullableInt: {
                let value = Yojson.Basic.member(\"nullableInt\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_int(value))
                | `Null => None
                };
              },
              int: {
                let value = Yojson.Basic.member(\"int\", value);
                Yojson.Basic.to_int(value);
              },
              nullableFloat: {
                let value = Yojson.Basic.member(\"nullableFloat\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_float(value))
                | `Null => None
                };
              },
              float: {
                let value = Yojson.Basic.member(\"float\", value);
                Yojson.Basic.to_float(value);
              },
              nullableBoolean: {
                let value = Yojson.Basic.member(\"nullableBoolean\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_bool(value))
                | `Null => None
                };
              },
              boolean: {
                let value = Yojson.Basic.member(\"boolean\", value);
                Yojson.Basic.to_bool(value);
              },
              nullableID: {
                let value = Yojson.Basic.member(\"nullableID\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_string(value))
                | `Null => None
                };
              },
              id: {
                let value = Yojson.Basic.member(\"id\", value);
                Yojson.Basic.to_string(value);
              },
            }: t_variousScalars
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let variousScalars = {
        let value = (value: t).variousScalars;
        let id = {
          let value = (value: t_variousScalars).id;
          value;
        }
        and nullableID = {
          let value = (value: t_variousScalars).nullableID;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and boolean = {
          let value = (value: t_variousScalars).boolean;
          value;
        }
        and nullableBoolean = {
          let value = (value: t_variousScalars).nullableBoolean;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and float = {
          let value = (value: t_variousScalars).float;
          value;
        }
        and nullableFloat = {
          let value = (value: t_variousScalars).nullableFloat;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and int = {
          let value = (value: t_variousScalars).int;
          value;
        }
        and nullableInt = {
          let value = (value: t_variousScalars).nullableInt;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and string = {
          let value = (value: t_variousScalars).string;
          value;
        }
        and nullableString = {
          let value = (value: t_variousScalars).nullableString;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        };
        {
          nullableString,
          string,
          nullableInt,
          int,
          nullableFloat,
          float,
          nullableBoolean,
          boolean,
          nullableID,
          id,
        };
      };
      {variousScalars: variousScalars};
    };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};
module MyQuery1b: {
  module Raw: {
    type t;
    type t_variables;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => unit;
  let makeVariables: unit => unit;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t = Yojson.Basic.json;
    type t_variables = Yojson.Basic.json;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  let query: string = [%raw
    \"graphql`\\n  query   {\\n    variousScalars  {\\n      nullableString\\n      string\\n      nullableInt\\n      int\\n      nullableFloat\\n      float\\n      nullableBoolean\\n      boolean\\n      nullableID\\n      id\\n    }\\n  }\\n`\"
  ];
  let parse: Raw.t => t =
    (value) => (
      {
        variousScalars: {
          let value = Yojson.Basic.member(\"variousScalars\", value);
          (
            {
              nullableString: {
                let value = Yojson.Basic.member(\"nullableString\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_string(value))
                | `Null => None
                };
              },
              string: {
                let value = Yojson.Basic.member(\"string\", value);
                Yojson.Basic.to_string(value);
              },
              nullableInt: {
                let value = Yojson.Basic.member(\"nullableInt\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_int(value))
                | `Null => None
                };
              },
              int: {
                let value = Yojson.Basic.member(\"int\", value);
                Yojson.Basic.to_int(value);
              },
              nullableFloat: {
                let value = Yojson.Basic.member(\"nullableFloat\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_float(value))
                | `Null => None
                };
              },
              float: {
                let value = Yojson.Basic.member(\"float\", value);
                Yojson.Basic.to_float(value);
              },
              nullableBoolean: {
                let value = Yojson.Basic.member(\"nullableBoolean\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_bool(value))
                | `Null => None
                };
              },
              boolean: {
                let value = Yojson.Basic.member(\"boolean\", value);
                Yojson.Basic.to_bool(value);
              },
              nullableID: {
                let value = Yojson.Basic.member(\"nullableID\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_string(value))
                | `Null => None
                };
              },
              id: {
                let value = Yojson.Basic.member(\"id\", value);
                Yojson.Basic.to_string(value);
              },
            }: t_variousScalars
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let variousScalars = {
        let value = (value: t).variousScalars;
        let id = {
          let value = (value: t_variousScalars).id;
          value;
        }
        and nullableID = {
          let value = (value: t_variousScalars).nullableID;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and boolean = {
          let value = (value: t_variousScalars).boolean;
          value;
        }
        and nullableBoolean = {
          let value = (value: t_variousScalars).nullableBoolean;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and float = {
          let value = (value: t_variousScalars).float;
          value;
        }
        and nullableFloat = {
          let value = (value: t_variousScalars).nullableFloat;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and int = {
          let value = (value: t_variousScalars).int;
          value;
        }
        and nullableInt = {
          let value = (value: t_variousScalars).nullableInt;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and string = {
          let value = (value: t_variousScalars).string;
          value;
        }
        and nullableString = {
          let value = (value: t_variousScalars).nullableString;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        };
        {
          nullableString,
          string,
          nullableInt,
          int,
          nullableFloat,
          float,
          nullableBoolean,
          boolean,
          nullableID,
          id,
        };
      };
      {variousScalars: variousScalars};
    };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};
module MyQuery2: {
  module Raw: {
    type t;
    type t_variables;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => unit;
  let makeVariables: unit => unit;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t = Yojson.Basic.json;
    type t_variables = Yojson.Basic.json;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  let query: string = [%raw
    \"require(\\\"gatsby\\\").graphql`\\n  query   {\\n    variousScalars  {\\n      nullableString\\n      string\\n      nullableInt\\n      int\\n      nullableFloat\\n      float\\n      nullableBoolean\\n      boolean\\n      nullableID\\n      id\\n    }\\n  }\\n`\"
  ];
  let parse: Raw.t => t =
    (value) => (
      {
        variousScalars: {
          let value = Yojson.Basic.member(\"variousScalars\", value);
          (
            {
              nullableString: {
                let value = Yojson.Basic.member(\"nullableString\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_string(value))
                | `Null => None
                };
              },
              string: {
                let value = Yojson.Basic.member(\"string\", value);
                Yojson.Basic.to_string(value);
              },
              nullableInt: {
                let value = Yojson.Basic.member(\"nullableInt\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_int(value))
                | `Null => None
                };
              },
              int: {
                let value = Yojson.Basic.member(\"int\", value);
                Yojson.Basic.to_int(value);
              },
              nullableFloat: {
                let value = Yojson.Basic.member(\"nullableFloat\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_float(value))
                | `Null => None
                };
              },
              float: {
                let value = Yojson.Basic.member(\"float\", value);
                Yojson.Basic.to_float(value);
              },
              nullableBoolean: {
                let value = Yojson.Basic.member(\"nullableBoolean\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_bool(value))
                | `Null => None
                };
              },
              boolean: {
                let value = Yojson.Basic.member(\"boolean\", value);
                Yojson.Basic.to_bool(value);
              },
              nullableID: {
                let value = Yojson.Basic.member(\"nullableID\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_string(value))
                | `Null => None
                };
              },
              id: {
                let value = Yojson.Basic.member(\"id\", value);
                Yojson.Basic.to_string(value);
              },
            }: t_variousScalars
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let variousScalars = {
        let value = (value: t).variousScalars;
        let id = {
          let value = (value: t_variousScalars).id;
          value;
        }
        and nullableID = {
          let value = (value: t_variousScalars).nullableID;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and boolean = {
          let value = (value: t_variousScalars).boolean;
          value;
        }
        and nullableBoolean = {
          let value = (value: t_variousScalars).nullableBoolean;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and float = {
          let value = (value: t_variousScalars).float;
          value;
        }
        and nullableFloat = {
          let value = (value: t_variousScalars).nullableFloat;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and int = {
          let value = (value: t_variousScalars).int;
          value;
        }
        and nullableInt = {
          let value = (value: t_variousScalars).nullableInt;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and string = {
          let value = (value: t_variousScalars).string;
          value;
        }
        and nullableString = {
          let value = (value: t_variousScalars).nullableString;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        };
        {
          nullableString,
          string,
          nullableInt,
          int,
          nullableFloat,
          float,
          nullableBoolean,
          boolean,
          nullableID,
          id,
        };
      };
      {variousScalars: variousScalars};
    };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};
module MyQuery3: {
  module Raw: {
    type t;
    type t_variables;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => unit;
  let makeVariables: unit => unit;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t = Yojson.Basic.json;
    type t_variables = Yojson.Basic.json;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  let query: string = [%raw
    \"require(\\\"gatsby\\\").graphql`\\n  query   {\\n    variousScalars  {\\n      nullableString\\n      string\\n      nullableInt\\n      int\\n      nullableFloat\\n      float\\n      nullableBoolean\\n      boolean\\n      nullableID\\n      id\\n    }\\n  }\\n`\"
  ];
  let parse: Raw.t => t =
    (value) => (
      {
        variousScalars: {
          let value = Yojson.Basic.member(\"variousScalars\", value);
          (
            {
              nullableString: {
                let value = Yojson.Basic.member(\"nullableString\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_string(value))
                | `Null => None
                };
              },
              string: {
                let value = Yojson.Basic.member(\"string\", value);
                Yojson.Basic.to_string(value);
              },
              nullableInt: {
                let value = Yojson.Basic.member(\"nullableInt\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_int(value))
                | `Null => None
                };
              },
              int: {
                let value = Yojson.Basic.member(\"int\", value);
                Yojson.Basic.to_int(value);
              },
              nullableFloat: {
                let value = Yojson.Basic.member(\"nullableFloat\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_float(value))
                | `Null => None
                };
              },
              float: {
                let value = Yojson.Basic.member(\"float\", value);
                Yojson.Basic.to_float(value);
              },
              nullableBoolean: {
                let value = Yojson.Basic.member(\"nullableBoolean\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_bool(value))
                | `Null => None
                };
              },
              boolean: {
                let value = Yojson.Basic.member(\"boolean\", value);
                Yojson.Basic.to_bool(value);
              },
              nullableID: {
                let value = Yojson.Basic.member(\"nullableID\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_string(value))
                | `Null => None
                };
              },
              id: {
                let value = Yojson.Basic.member(\"id\", value);
                Yojson.Basic.to_string(value);
              },
            }: t_variousScalars
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let variousScalars = {
        let value = (value: t).variousScalars;
        let id = {
          let value = (value: t_variousScalars).id;
          value;
        }
        and nullableID = {
          let value = (value: t_variousScalars).nullableID;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and boolean = {
          let value = (value: t_variousScalars).boolean;
          value;
        }
        and nullableBoolean = {
          let value = (value: t_variousScalars).nullableBoolean;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and float = {
          let value = (value: t_variousScalars).float;
          value;
        }
        and nullableFloat = {
          let value = (value: t_variousScalars).nullableFloat;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and int = {
          let value = (value: t_variousScalars).int;
          value;
        }
        and nullableInt = {
          let value = (value: t_variousScalars).nullableInt;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and string = {
          let value = (value: t_variousScalars).string;
          value;
        }
        and nullableString = {
          let value = (value: t_variousScalars).nullableString;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        };
        {
          nullableString,
          string,
          nullableInt,
          int,
          nullableFloat,
          float,
          nullableBoolean,
          boolean,
          nullableID,
          id,
        };
      };
      {variousScalars: variousScalars};
    };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};
module MyQuery4: {
  module Raw: {
    type t;
    type t_variables;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => unit;
  let makeVariables: unit => unit;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t = Yojson.Basic.json;
    type t_variables = Yojson.Basic.json;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  let query: string = [%raw
    \"require(\\\"gatsby\\\")`\\n  query   {\\n    variousScalars  {\\n      nullableString\\n      string\\n      nullableInt\\n      int\\n      nullableFloat\\n      float\\n      nullableBoolean\\n      boolean\\n      nullableID\\n      id\\n    }\\n  }\\n`\"
  ];
  let parse: Raw.t => t =
    (value) => (
      {
        variousScalars: {
          let value = Yojson.Basic.member(\"variousScalars\", value);
          (
            {
              nullableString: {
                let value = Yojson.Basic.member(\"nullableString\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_string(value))
                | `Null => None
                };
              },
              string: {
                let value = Yojson.Basic.member(\"string\", value);
                Yojson.Basic.to_string(value);
              },
              nullableInt: {
                let value = Yojson.Basic.member(\"nullableInt\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_int(value))
                | `Null => None
                };
              },
              int: {
                let value = Yojson.Basic.member(\"int\", value);
                Yojson.Basic.to_int(value);
              },
              nullableFloat: {
                let value = Yojson.Basic.member(\"nullableFloat\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_float(value))
                | `Null => None
                };
              },
              float: {
                let value = Yojson.Basic.member(\"float\", value);
                Yojson.Basic.to_float(value);
              },
              nullableBoolean: {
                let value = Yojson.Basic.member(\"nullableBoolean\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_bool(value))
                | `Null => None
                };
              },
              boolean: {
                let value = Yojson.Basic.member(\"boolean\", value);
                Yojson.Basic.to_bool(value);
              },
              nullableID: {
                let value = Yojson.Basic.member(\"nullableID\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_string(value))
                | `Null => None
                };
              },
              id: {
                let value = Yojson.Basic.member(\"id\", value);
                Yojson.Basic.to_string(value);
              },
            }: t_variousScalars
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let variousScalars = {
        let value = (value: t).variousScalars;
        let id = {
          let value = (value: t_variousScalars).id;
          value;
        }
        and nullableID = {
          let value = (value: t_variousScalars).nullableID;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and boolean = {
          let value = (value: t_variousScalars).boolean;
          value;
        }
        and nullableBoolean = {
          let value = (value: t_variousScalars).nullableBoolean;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and float = {
          let value = (value: t_variousScalars).float;
          value;
        }
        and nullableFloat = {
          let value = (value: t_variousScalars).nullableFloat;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and int = {
          let value = (value: t_variousScalars).int;
          value;
        }
        and nullableInt = {
          let value = (value: t_variousScalars).nullableInt;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and string = {
          let value = (value: t_variousScalars).string;
          value;
        }
        and nullableString = {
          let value = (value: t_variousScalars).nullableString;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        };
        {
          nullableString,
          string,
          nullableInt,
          int,
          nullableFloat,
          float,
          nullableBoolean,
          boolean,
          nullableID,
          id,
        };
      };
      {variousScalars: variousScalars};
    };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};
module ListFragment: {
  [@ocaml.warning \"-32\"];
  module Raw: {type t;};
  type t = {
    nullableOfNullable: option(array(option(string))),
    nullableOfNonNullable: option(array(string)),
  };
  type nonrec t_Lists = t;
  /** the GraphQL fragment */
  let query: string;
  /** Parse the raw JSON-compatible GraphQL data into ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data */
  let serialize: t => Raw.t;
  let verifyArgsAndParse: (~fragmentName: [ | `ListFragment], Raw.t) => t;
  let verifyName: [ | `ListFragment] => unit;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t;
  };
  type t = {
    nullableOfNullable: option(array(option(string))),
    nullableOfNonNullable: option(array(string)),
  };
  type nonrec t_Lists = t;
  let query: string = [%raw
    \"require(\\\"gatsby\\\")`\\n  fragment ListFragment on Lists   {\\n    nullableOfNullable\\n    nullableOfNonNullable\\n  }\\n`\"
  ];
  let parse: Raw.t => t =
    (value) => (
      {
        nullableOfNullable: {
          let value = Yojson.Basic.member(\"nullableOfNullable\", value);
          switch (value) {
          | value =>
            Some(
              switch (value) {
              | `List(json_list) =>
                List.map(json_list =>
                  switch (value) {
                  | value => Some(Yojson.Basic.to_string(value))
                  | `Null => None
                  }
                )
                |> Array.of_list
              | _ => []
              },
            )
          | `Null => None
          };
        },
        nullableOfNonNullable: {
          let value = Yojson.Basic.member(\"nullableOfNonNullable\", value);
          switch (value) {
          | value =>
            Some(
              switch (value) {
              | `List(json_list) =>
                List.map(json_list => Yojson.Basic.to_string(value))
                |> Array.of_list
              | _ => []
              },
            )
          | `Null => None
          };
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let nullableOfNonNullable = {
        let value = (value: t).nullableOfNonNullable;
        switch (value) {
        | Some(value) =>
          `List(value |> Array.map(value => value) |> Array.to_list)
        | None => `Null
        };
      }
      and nullableOfNullable = {
        let value = (value: t).nullableOfNullable;
        switch (value) {
        | Some(value) =>
          `List(
            value
            |> Array.map(value =>
                 switch (value) {
                 | Some(value) => value
                 | None => `Null
                 }
               )
            |> Array.to_list,
          )
        | None => `Null
        };
      };
      {nullableOfNullable, nullableOfNonNullable};
    };
  let verifyArgsAndParse =
      (~fragmentName as _ListFragment: [ | `ListFragment], value: Raw.t) =>
    parse(value);
  let verifyName =
    fun
    | `ListFragment => ();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
};
module MyQuery5: {
  module Raw: {
    type t;
    type t_variables;
  };
  type t = {lists: ListFragment.t};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => unit;
  let makeVariables: unit => unit;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t = Yojson.Basic.json;
    type t_variables = Yojson.Basic.json;
  };
  type t = {lists: ListFragment.t};
  type t_variables = unit;
  let query: string = [%raw
    \"require(\\\"gatsby\\\")`\\n  query MyQuery5  {\\n    lists  {\\n      ...ListFragment\\n    }\\n  }\\n`\"
  ];
  let parse: Raw.t => t =
    (value) => (
      {
        lists: {
          let value = Yojson.Basic.member(\"lists\", value);

          ListFragment.verifyArgsAndParse(~fragmentName=`ListFragment, value);
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let lists = {
        let value = (value: t).lists;
        ListFragment.serialize(value);
      };
      {lists: lists};
    };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};
module MyQuery6: {
  module Raw: {
    type t;
    type t_variables;
  };
  type t = {lists: ListFragment.t};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => unit;
  let makeVariables: unit => unit;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t = Yojson.Basic.json;
    type t_variables = Yojson.Basic.json;
  };
  type t = {lists: ListFragment.t};
  type t_variables = unit;
  let query: string =
    [%raw
      \"(frag_0) => require(\\\"gatsby\\\")`\\n  query MyQuery6  {\\n    lists  {\\n      ...ListFragment\\n    }\\n  }\\n  ${frag_0}\\n`\"
    ](
      ListFragment.query,
    );
  let parse: Raw.t => t =
    (value) => (
      {
        lists: {
          let value = Yojson.Basic.member(\"lists\", value);

          ListFragment.verifyArgsAndParse(~fragmentName=`ListFragment, value);
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let lists = {
        let value = (value: t).lists;
        ListFragment.serialize(value);
      };
      {lists: lists};
    };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};
module MyQuery7: {
  module Raw: {
    type t;
    type t_variables;
  };
  type t = {lists: ListFragment.t};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => unit;
  let makeVariables: unit => unit;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t = Yojson.Basic.json;
    type t_variables = Yojson.Basic.json;
  };
  type t = {lists: ListFragment.t};
  type t_variables = unit;
  let query: string = [%raw
    \"graphql`\\n  query MyQuery7  {\\n    lists  {\\n      ...ListFragment\\n    }\\n  }\\n`\"
  ];
  let parse: Raw.t => t =
    (value) => (
      {
        lists: {
          let value = Yojson.Basic.member(\"lists\", value);

          ListFragment.verifyArgsAndParse(~fragmentName=`ListFragment, value);
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let lists = {
        let value = (value: t).lists;
        ListFragment.serialize(value);
      };
      {lists: lists};
    };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};
module MyQuery8: {
  module Raw: {
    type t;
    type t_variables;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => unit;
  let makeVariables: unit => unit;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t = Yojson.Basic.json;
    type t_variables = Yojson.Basic.json;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  [@bs.module \"apollo-client\"] external graphql: string => string = \"gql\";
  let query =
    graphql(
      \"query MyQuery6  {\\nvariousScalars  {\\nnullableString  \\nstring  \\nnullableInt  \\nint  \\nnullableFloat  \\nfloat  \\nnullableBoolean  \\nboolean  \\nnullableID  \\nid  \\n}\\n\\n}\\n\",
    );
  let parse: Raw.t => t =
    (value) => (
      {
        variousScalars: {
          let value = Yojson.Basic.member(\"variousScalars\", value);
          (
            {
              nullableString: {
                let value = Yojson.Basic.member(\"nullableString\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_string(value))
                | `Null => None
                };
              },
              string: {
                let value = Yojson.Basic.member(\"string\", value);
                Yojson.Basic.to_string(value);
              },
              nullableInt: {
                let value = Yojson.Basic.member(\"nullableInt\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_int(value))
                | `Null => None
                };
              },
              int: {
                let value = Yojson.Basic.member(\"int\", value);
                Yojson.Basic.to_int(value);
              },
              nullableFloat: {
                let value = Yojson.Basic.member(\"nullableFloat\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_float(value))
                | `Null => None
                };
              },
              float: {
                let value = Yojson.Basic.member(\"float\", value);
                Yojson.Basic.to_float(value);
              },
              nullableBoolean: {
                let value = Yojson.Basic.member(\"nullableBoolean\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_bool(value))
                | `Null => None
                };
              },
              boolean: {
                let value = Yojson.Basic.member(\"boolean\", value);
                Yojson.Basic.to_bool(value);
              },
              nullableID: {
                let value = Yojson.Basic.member(\"nullableID\", value);
                switch (value) {
                | value => Some(Yojson.Basic.to_string(value))
                | `Null => None
                };
              },
              id: {
                let value = Yojson.Basic.member(\"id\", value);
                Yojson.Basic.to_string(value);
              },
            }: t_variousScalars
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let variousScalars = {
        let value = (value: t).variousScalars;
        let id = {
          let value = (value: t_variousScalars).id;
          value;
        }
        and nullableID = {
          let value = (value: t_variousScalars).nullableID;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and boolean = {
          let value = (value: t_variousScalars).boolean;
          value;
        }
        and nullableBoolean = {
          let value = (value: t_variousScalars).nullableBoolean;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and float = {
          let value = (value: t_variousScalars).float;
          value;
        }
        and nullableFloat = {
          let value = (value: t_variousScalars).nullableFloat;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and int = {
          let value = (value: t_variousScalars).int;
          value;
        }
        and nullableInt = {
          let value = (value: t_variousScalars).nullableInt;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        }
        and string = {
          let value = (value: t_variousScalars).string;
          value;
        }
        and nullableString = {
          let value = (value: t_variousScalars).nullableString;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        };
        {
          nullableString,
          string,
          nullableInt,
          int,
          nullableFloat,
          float,
          nullableBoolean,
          boolean,
          nullableID,
          id,
        };
      };
      {variousScalars: variousScalars};
    };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};

