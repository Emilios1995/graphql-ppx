Compile Legacy › union.re › output
// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';


var Raw = {};

var query = \"query   {\\ndogOrHuman  {\\n__typename\\n...on Dog   {\\nname  \\nbarkVolume  \\n}\\n\\n...on Human   {\\nname  \\n}\\n\\n}\\n\\n}\\n\";

function parse(value) {
  var value$1 = value.dogOrHuman;
  var typename = value$1[\"__typename\"];
  var tmp;
  switch (typename) {
    case \"Dog\" :
        var value$2 = value$1.barkVolume;
        var value$3 = value$1.name;
        tmp = {
          HASH: /* Dog */3406428,
          VAL: {
            name: value$3,
            barkVolume: value$2
          }
        };
        break;
    case \"Human\" :
        tmp = {
          HASH: /* Human */-1031617139,
          VAL: {
            name: value$1.name
          }
        };
        break;
    default:
      tmp = {
        HASH: /* FutureAddedValue */-31101740,
        VAL: value$1
      };
  }
  return {
          dogOrHuman: tmp
        };
}

function serialize(value) {
  var value$1 = value.dogOrHuman;
  var variant = value$1.HASH;
  var tmp;
  if (variant !== -31101740) {
    if (variant >= 3406428) {
      var value$2 = value$1.VAL;
      var value$3 = value$2.barkVolume;
      var value$4 = value$2.name;
      tmp = {
        __typename: \"Dog\",
        name: value$4,
        barkVolume: value$3
      };
    } else {
      var value$5 = value$1.VAL.name;
      tmp = {
        __typename: \"Human\",
        name: value$5
      };
    }
  } else {
    tmp = value$1.VAL;
  }
  return {
          dogOrHuman: tmp
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

function make(param) {
  return {
          query: query,
          variables: null,
          parse: parse
        };
}

var Z__INTERNAL = {
  graphql_module: 0
};

var MyQuery = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables,
  make: make,
  Z__INTERNAL: Z__INTERNAL
};

var Raw$1 = {};

var query$1 = \"query   {\\ndogOrHuman  {\\n__typename\\n...on Dog   {\\nname  \\nbarkVolume  \\n}\\n\\n...on Human   {\\nname  \\n}\\n\\n}\\n\\n}\\n\";

function parse$1(value) {
  var value$1 = value.dogOrHuman;
  var typename = value$1[\"__typename\"];
  var tmp;
  switch (typename) {
    case \"Dog\" :
        var value$2 = value$1.barkVolume;
        var value$3 = value$1.name;
        tmp = {
          HASH: /* Dog */3406428,
          VAL: {
            name: value$3,
            barkVolume: value$2
          }
        };
        break;
    case \"Human\" :
        tmp = {
          HASH: /* Human */-1031617139,
          VAL: {
            name: value$1.name
          }
        };
        break;
    default:
      tmp = {
        HASH: /* FutureAddedValue */-31101740,
        VAL: value$1
      };
  }
  return {
          dogOrHuman: tmp
        };
}

function serialize$1(value) {
  var value$1 = value.dogOrHuman;
  var variant = value$1.HASH;
  var tmp;
  if (variant !== -31101740) {
    if (variant >= 3406428) {
      var value$2 = value$1.VAL;
      var value$3 = value$2.barkVolume;
      var value$4 = value$2.name;
      tmp = {
        __typename: \"Dog\",
        name: value$4,
        barkVolume: value$3
      };
    } else {
      var value$5 = value$1.VAL.name;
      tmp = {
        __typename: \"Human\",
        name: value$5
      };
    }
  } else {
    tmp = value$1.VAL;
  }
  return {
          dogOrHuman: tmp
        };
}

function serializeVariables$1(param) {
  
}

function makeVariables$1(param) {
  
}

function makeDefaultVariables$1(param) {
  
}

function make$1(param) {
  return {
          query: query$1,
          variables: null,
          parse: parse$1
        };
}

var Z__INTERNAL$1 = {
  graphql_module: 0
};

var MyQueryNoError = {
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  makeDefaultVariables: makeDefaultVariables$1,
  make: make$1,
  Z__INTERNAL: Z__INTERNAL$1
};

var Raw$2 = {};

var query$2 = \"query   {\\ndogOrHuman  {\\n__typename\\n...on Dog   {\\nname  \\n__typename  \\n}\\n\\n...on Human   {\\nname  \\n__typename  \\n}\\n\\n}\\n\\n}\\n\";

function parse$2(value) {
  var value$1 = value.dogOrHuman;
  var typename = value$1[\"__typename\"];
  var tmp;
  switch (typename) {
    case \"Dog\" :
        var value$2 = value$1.__typename;
        var value$3 = value$1.name;
        tmp = {
          HASH: /* Dog */3406428,
          VAL: {
            name: value$3,
            __typename: value$2
          }
        };
        break;
    case \"Human\" :
        var value$4 = value$1.__typename;
        var value$5 = value$1.name;
        tmp = {
          HASH: /* Human */-1031617139,
          VAL: {
            name: value$5,
            __typename: value$4
          }
        };
        break;
    default:
      tmp = {
        HASH: /* FutureAddedValue */-31101740,
        VAL: value$1
      };
  }
  return {
          dogOrHuman: tmp
        };
}

function serialize$2(value) {
  var value$1 = value.dogOrHuman;
  var variant = value$1.HASH;
  var tmp;
  if (variant !== -31101740) {
    if (variant >= 3406428) {
      var value$2 = value$1.VAL.name;
      tmp = {
        name: value$2,
        __typename: \"Dog\"
      };
    } else {
      var value$3 = value$1.VAL.name;
      tmp = {
        name: value$3,
        __typename: \"Human\"
      };
    }
  } else {
    tmp = value$1.VAL;
  }
  return {
          dogOrHuman: tmp
        };
}

function serializeVariables$2(param) {
  
}

function makeVariables$2(param) {
  
}

function makeDefaultVariables$2(param) {
  
}

function make$2(param) {
  return {
          query: query$2,
          variables: null,
          parse: parse$2
        };
}

var Z__INTERNAL$2 = {
  graphql_module: 0
};

var NamedQuery = {
  Raw: Raw$2,
  query: query$2,
  parse: parse$2,
  serialize: serialize$2,
  serializeVariables: serializeVariables$2,
  makeVariables: makeVariables$2,
  makeDefaultVariables: makeDefaultVariables$2,
  make: make$2,
  Z__INTERNAL: Z__INTERNAL$2
};

var Raw$3 = {};

var query$3 = \"fragment DogFields on Dog   {\\nname  \\n__typename  \\n}\\n\";

function parse$3(value) {
  var value$1 = value.__typename;
  var value$2 = value.name;
  return {
          name: value$2,
          __typename: value$1
        };
}

function verifyArgsAndParse(_DogFields, value) {
  return parse$3(value);
}

function serialize$3(value) {
  var value$1 = value.__typename;
  var value$2 = value.name;
  return {
          name: value$2,
          __typename: value$1
        };
}

function verifyName(param) {
  
}

var Z__INTERNAL$3 = {
  graphql: 0,
  graphql_module: 0
};

var DogFields = {
  Raw: Raw$3,
  query: query$3,
  parse: parse$3,
  verifyArgsAndParse: verifyArgsAndParse,
  serialize: serialize$3,
  verifyName: verifyName,
  Z__INTERNAL: Z__INTERNAL$3
};

var Raw$4 = {};

var query$4 = \"query dogOrHuman  {\\ndogOrHuman  {\\n__typename\\n...on Dog   {\\n...DogFields   \\n}\\n\\n}\\n\\n}\\nfragment DogFields on Dog   {\\nname  \\n__typename  \\n}\\n\";

function parse$4(value) {
  var value$1 = value.dogOrHuman;
  var typename = value$1[\"__typename\"];
  var tmp = typename === \"Dog\" ? ({
        HASH: /* Dog */3406428,
        VAL: parse$3(value$1)
      }) : ({
        HASH: /* FutureAddedValue */-31101740,
        VAL: value$1
      });
  return {
          dogOrHuman: tmp
        };
}

function serialize$4(value) {
  var value$1 = value.dogOrHuman;
  return {
          dogOrHuman: value$1.HASH >= 3406428 ? serialize$3(value$1.VAL) : value$1.VAL
        };
}

function serializeVariables$3(param) {
  
}

function makeVariables$3(param) {
  
}

function makeDefaultVariables$3(param) {
  
}

function make$3(param) {
  return {
          query: query$4,
          variables: null,
          parse: parse$4
        };
}

var Z__INTERNAL$4 = {
  graphql_module: 0
};

var DogOrHuman = {
  Raw: Raw$4,
  query: query$4,
  parse: parse$4,
  serialize: serialize$4,
  serializeVariables: serializeVariables$3,
  makeVariables: makeVariables$3,
  makeDefaultVariables: makeDefaultVariables$3,
  make: make$3,
  Z__INTERNAL: Z__INTERNAL$4
};

var NamedSpread = {
  DogFields: DogFields,
  DogOrHuman: DogOrHuman
};

exports.MyQuery = MyQuery;
exports.MyQueryNoError = MyQueryNoError;
exports.NamedQuery = NamedQuery;
exports.NamedSpread = NamedSpread;
/* No side effect */

