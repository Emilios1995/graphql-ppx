Generate Native › customScalars.re › output
[@ocaml.ppx.context
  {
    tool_name: \"migrate_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module MyQuery: {
  module Raw: {
    type t;
    type t_variables;
  };
  type t_customScalarField = {
    nullable: option(Yojson.Basic.t),
    nonNullable: Yojson.Basic.t,
  };
  type t = {customScalarField: t_customScalarField};
  type t_variables = {
    opt: option(Yojson.Basic.t),
    req: Yojson.Basic.t,
  };
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: t_variables => Yojson.Basic.json;
  let makeVariables:
    (~opt: Yojson.Basic.t=?, ~req: Yojson.Basic.t, unit) => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t = Yojson.Basic.json;
    type t_variables = Yojson.Basic.json;
  };
  type t_customScalarField = {
    nullable: option(Yojson.Basic.t),
    nonNullable: Yojson.Basic.t,
  };
  type t = {customScalarField: t_customScalarField};
  type t_variables = {
    opt: option(Yojson.Basic.t),
    req: Yojson.Basic.t,
  };
  let query = \"query ($opt: CustomScalar, $req: CustomScalar!)  {\\ncustomScalarField(argOptional: $opt, argRequired: $req)  {\\nnullable  \\nnonNullable  \\n}\\n\\n}\\n\";
  let parse: Raw.t => t =
    (value) => (
      {
        customScalarField: {
          let value = Yojson.Basic.member(\"customScalarField\", value);
          (
            {
              nullable: {
                let value = Yojson.Basic.member(\"nullable\", value);
                switch (value) {
                | value => Some(value)
                | `Null => None
                };
              },
              nonNullable: {
                let value = Yojson.Basic.member(\"nonNullable\", value);
                value;
              },
            }: t_customScalarField
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let customScalarField = {
        let value = (value: t).customScalarField;
        let nonNullable = {
          let value = (value: t_customScalarField).nonNullable;
          value;
        }
        and nullable = {
          let value = (value: t_customScalarField).nullable;
          switch (value) {
          | Some(value) => value
          | None => `Null
          };
        };
        {nullable, nonNullable};
      };
      {customScalarField: customScalarField};
    };
  let serializeVariables: t_variables => Yojson.Basic.json =
    inp => {
      opt:
        (
          a =>
            switch (a) {
            | None => `Null
            | Some(b) => (a => a)(b)
            }
        )(
          (inp: t_variables).opt,
        ),
      req: (a => a)((inp: t_variables).req),
    };
  let makeVariables = (~opt=?, ~req, ()): t_variables => {opt, req};
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};

