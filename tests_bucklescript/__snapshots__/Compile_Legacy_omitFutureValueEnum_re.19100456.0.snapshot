Compile Legacy › omitFutureValueEnum.re › output
// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';


var Raw = {};

var query = \"mutation   {\\nmutationWithError  {\\nerrors  {\\nmessage  \\nfield  \\n}\\n\\n}\\n\\n}\\n\";

function parse(value) {
  var value$1 = value.mutationWithError;
  var value$2 = value$1.errors;
  var errors = !(value$2 == null) ? value$2.map(function (value) {
          var value$1 = value.field;
          var field;
          switch (value$1) {
            case \"FIRST\" :
                field = /* FIRST */-24399856;
                break;
            case \"SECOND\" :
                field = /* SECOND */382368628;
                break;
            case \"THIRD\" :
                field = /* THIRD */225952583;
                break;
            default:
              field = {
                HASH: /* FutureAddedValue */-31101740,
                VAL: value$1
              };
          }
          var value$2 = value.message;
          return {
                  message: value$2,
                  field: field
                };
        }) : undefined;
  return {
          mutationWithError: {
            errors: errors
          }
        };
}

function serialize(value) {
  var value$1 = value.mutationWithError;
  var value$2 = value$1.errors;
  var errors = value$2 !== undefined ? value$2.map(function (value) {
          var value$1 = value.field;
          var field = typeof value$1 === \"number\" ? (
              value$1 !== 225952583 ? (
                  value$1 >= 382368628 ? \"SECOND\" : \"FIRST\"
                ) : \"THIRD\"
            ) : value$1.VAL;
          var value$2 = value.message;
          return {
                  message: value$2,
                  field: field
                };
        }) : null;
  return {
          mutationWithError: {
            errors: errors
          }
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

function make(param) {
  return {
          query: query,
          variables: null,
          parse: parse
        };
}

var Z__INTERNAL = {
  graphql_module: 0
};

var Normal = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables,
  make: make,
  Z__INTERNAL: Z__INTERNAL
};

var Raw$1 = {};

var query$1 = \"mutation   {\\nmutationWithError  {\\nerrors  {\\nmessage  \\nfield  \\n}\\n\\n}\\n\\n}\\n\";

function parse$1(value) {
  var value$1 = value.mutationWithError;
  var value$2 = value$1.errors;
  var errors = !(value$2 == null) ? value$2.map(function (value) {
          var value$1 = value.field;
          var field;
          switch (value$1) {
            case \"FIRST\" :
                field = /* FIRST */-24399856;
                break;
            case \"SECOND\" :
                field = /* SECOND */382368628;
                break;
            case \"THIRD\" :
                field = /* THIRD */225952583;
                break;
            default:
              throw {
                    RE_EXN_ID: \"Not_found\",
                    Error: new Error()
                  };
          }
          var value$2 = value.message;
          return {
                  message: value$2,
                  field: field
                };
        }) : undefined;
  return {
          mutationWithError: {
            errors: errors
          }
        };
}

function serialize$1(value) {
  var value$1 = value.mutationWithError;
  var value$2 = value$1.errors;
  var errors = value$2 !== undefined ? value$2.map(function (value) {
          var value$1 = value.field;
          var field = value$1 !== 225952583 ? (
              value$1 >= 382368628 ? \"SECOND\" : \"FIRST\"
            ) : \"THIRD\";
          var value$2 = value.message;
          return {
                  message: value$2,
                  field: field
                };
        }) : null;
  return {
          mutationWithError: {
            errors: errors
          }
        };
}

function serializeVariables$1(param) {
  
}

function makeVariables$1(param) {
  
}

function makeDefaultVariables$1(param) {
  
}

function make$1(param) {
  return {
          query: query$1,
          variables: null,
          parse: parse$1
        };
}

var Z__INTERNAL$1 = {
  graphql_module: 0
};

var ByConfig = {
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  makeDefaultVariables: makeDefaultVariables$1,
  make: make$1,
  Z__INTERNAL: Z__INTERNAL$1
};

var Raw$2 = {};

var query$2 = \"mutation   {\\nmutationWithError  {\\nerrors  {\\nmessage  \\nfield  \\n}\\n\\n}\\n\\n}\\n\";

function parse$2(value) {
  var value$1 = value.mutationWithError;
  var value$2 = value$1.errors;
  var errors = !(value$2 == null) ? value$2.map(function (value) {
          var value$1 = value.field;
          var field;
          switch (value$1) {
            case \"FIRST\" :
                field = /* FIRST */-24399856;
                break;
            case \"SECOND\" :
                field = /* SECOND */382368628;
                break;
            case \"THIRD\" :
                field = /* THIRD */225952583;
                break;
            default:
              throw {
                    RE_EXN_ID: \"Not_found\",
                    Error: new Error()
                  };
          }
          var value$2 = value.message;
          return {
                  message: value$2,
                  field: field
                };
        }) : undefined;
  return {
          mutationWithError: {
            errors: errors
          }
        };
}

function serialize$2(value) {
  var value$1 = value.mutationWithError;
  var value$2 = value$1.errors;
  var errors = value$2 !== undefined ? value$2.map(function (value) {
          var value$1 = value.field;
          var field = value$1 !== 225952583 ? (
              value$1 >= 382368628 ? \"SECOND\" : \"FIRST\"
            ) : \"THIRD\";
          var value$2 = value.message;
          return {
                  message: value$2,
                  field: field
                };
        }) : null;
  return {
          mutationWithError: {
            errors: errors
          }
        };
}

function serializeVariables$2(param) {
  
}

function makeVariables$2(param) {
  
}

function makeDefaultVariables$2(param) {
  
}

function make$2(param) {
  return {
          query: query$2,
          variables: null,
          parse: parse$2
        };
}

var Z__INTERNAL$2 = {
  graphql_module: 0
};

var ByDirective = {
  Raw: Raw$2,
  query: query$2,
  parse: parse$2,
  serialize: serialize$2,
  serializeVariables: serializeVariables$2,
  makeVariables: makeVariables$2,
  makeDefaultVariables: makeDefaultVariables$2,
  make: make$2,
  Z__INTERNAL: Z__INTERNAL$2
};

exports.Normal = Normal;
exports.ByConfig = ByConfig;
exports.ByDirective = ByDirective;
/* No side effect */

