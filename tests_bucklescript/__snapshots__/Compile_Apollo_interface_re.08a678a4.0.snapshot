Compile Apollo › interface.re › output
// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';


function deepMerge(json1, param) {
  return json1;
}

var GraphQL_PPX = {
  deepMerge: deepMerge
};

var Raw = {};

function parse(value) {
  var value$1 = value.users;
  return {
          users: value$1.map(function (value) {
                var typename = value[\"__typename\"];
                switch (typename) {
                  case \"AdminUser\" :
                      return {
                              HASH: /* AdminUser */632766042,
                              VAL: {
                                __typename: value.__typename,
                                id: value.id,
                                name: value.name
                              }
                            };
                  case \"AnonymousUser\" :
                      return {
                              HASH: /* AnonymousUser */-1001300680,
                              VAL: {
                                __typename: value.__typename,
                                id: value.id,
                                anonymousId: value.anonymousId
                              }
                            };
                  default:
                    return {
                            HASH: /* UnspecifiedFragment */300385927,
                            VAL: typename
                          };
                }
              })
        };
}

function serialize(value) {
  var value$1 = value.users;
  var users = value$1.map(function (value) {
        return null;
      });
  return {
          users: users
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var Z__INTERNAL = {
  graphql_module: 0
};

var QueryWithOnlyFragments = {
  Raw: Raw,
  query: \"query   {\\nusers  {\\n__typename\\n...on AdminUser   {\\n__typename  \\nid  \\nname  \\n}\\n\\n...on AnonymousUser   {\\n__typename  \\nid  \\nanonymousId  \\n}\\n\\n}\\n\\n}\\n\",
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables,
  Z__INTERNAL: Z__INTERNAL
};

var Raw$1 = {};

function parse$1(value) {
  var value$1 = value.users;
  return {
          users: value$1.map(function (value) {
                var typename = value[\"__typename\"];
                var tmp;
                switch (typename) {
                  case \"AdminUser\" :
                      tmp = {
                        HASH: /* AdminUser */632766042,
                        VAL: {
                          id: value.id,
                          __typename: value.__typename,
                          name: value.name
                        }
                      };
                      break;
                  case \"AnonymousUser\" :
                      tmp = {
                        HASH: /* AnonymousUser */-1001300680,
                        VAL: {
                          id: value.id,
                          __typename: value.__typename,
                          anonymousId: value.anonymousId
                        }
                      };
                      break;
                  default:
                    tmp = {
                      HASH: /* UnspecifiedFragment */300385927,
                      VAL: typename
                    };
                }
                return {
                        fragment: tmp,
                        id: value[\"id\"]
                      };
              })
        };
}

function serialize$1(value) {
  var value$1 = value.users;
  var users = value$1.map(function (value) {
        return [null].reduce(deepMerge, {
                    id: value.id
                  });
      });
  return {
          users: users
        };
}

function serializeVariables$1(param) {
  
}

function makeVariables$1(param) {
  
}

function makeDefaultVariables$1(param) {
  
}

var Z__INTERNAL$1 = {
  graphql_module: 0
};

var QueryWithMixedFragments = {
  Raw: Raw$1,
  query: \"query   {\\nusers  {\\n__typename\\nid  \\n...on AdminUser   {\\n__typename  \\nname  \\n}\\n\\n...on AnonymousUser   {\\n__typename  \\nanonymousId  \\n}\\n\\n}\\n\\n}\\n\",
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  makeDefaultVariables: makeDefaultVariables$1,
  Z__INTERNAL: Z__INTERNAL$1
};

var Raw$2 = {};

function parse$2(value) {
  var value$1 = value.users;
  return {
          users: value$1.map(function (value) {
                return {
                        id: value.id
                      };
              })
        };
}

function serialize$2(value) {
  var value$1 = value.users;
  var users = value$1.map(function (value) {
        var value$1 = value.id;
        return {
                id: value$1
              };
      });
  return {
          users: users
        };
}

function serializeVariables$2(param) {
  
}

function makeVariables$2(param) {
  
}

function makeDefaultVariables$2(param) {
  
}

var Z__INTERNAL$2 = {
  graphql_module: 0
};

var QueryWithoutFragments = {
  Raw: Raw$2,
  query: \"query   {\\nusers  {\\n__typename\\nid  \\n}\\n\\n}\\n\",
  parse: parse$2,
  serialize: serialize$2,
  serializeVariables: serializeVariables$2,
  makeVariables: makeVariables$2,
  makeDefaultVariables: makeDefaultVariables$2,
  Z__INTERNAL: Z__INTERNAL$2
};

exports.GraphQL_PPX = GraphQL_PPX;
exports.QueryWithOnlyFragments = QueryWithOnlyFragments;
exports.QueryWithMixedFragments = QueryWithMixedFragments;
exports.QueryWithoutFragments = QueryWithoutFragments;
/* No side effect */

