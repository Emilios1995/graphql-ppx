Generate Native › inlineFragmentQuery.re › output
[@ocaml.ppx.context
  {
    tool_name: \"migrate_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module ListFragment: {
  [@ocaml.warning \"-32\"];
  module Raw: {type t;};
  type t = {
    nullableOfNullable: option(array(option(string))),
    nullableOfNonNullable: option(array(string)),
  };
  type nonrec t_Lists = t;
  /** the GraphQL fragment */
  let query: string;
  /** Parse the raw JSON-compatible GraphQL data into ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data */
  let serialize: t => Raw.t;
  let verifyArgsAndParse: (~fragmentName: [ | `ListFragment], Raw.t) => t;
  let verifyName: [ | `ListFragment] => unit;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t = Yojson.Basic.t;
  };
  type t = {
    nullableOfNullable: option(array(option(string))),
    nullableOfNonNullable: option(array(string)),
  };
  type nonrec t_Lists = t;
  let query = \"fragment ListFragment on Lists   {\\nnullableOfNullable  \\nnullableOfNonNullable  \\n}\\n\";
  let parse: Raw.t => t =
    (value) => (
      {
        nullableOfNullable: {
          let value = Yojson.Basic.Util.member(\"nullableOfNullable\", value);
          switch (value) {
          | `Null => None
          | value =>
            Some(
              switch (value) {
              | `List(json_list) =>
                List.map(
                  value =>
                    switch (value) {
                    | `Null => None
                    | value => Some(Yojson.Basic.Util.to_string(value))
                    },
                  json_list,
                )
                |> Array.of_list
              | _ => [||]
              },
            )
          };
        },
        nullableOfNonNullable: {
          let value =
            Yojson.Basic.Util.member(\"nullableOfNonNullable\", value);
          switch (value) {
          | `Null => None
          | value =>
            Some(
              switch (value) {
              | `List(json_list) =>
                List.map(
                  value => Yojson.Basic.Util.to_string(value),
                  json_list,
                )
                |> Array.of_list
              | _ => [||]
              },
            )
          };
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let nullableOfNonNullable = {
        let value = (value: t).nullableOfNonNullable;
        switch (value) {
        | Some(value) =>
          `List(value |> Array.map(value => `String(value)) |> Array.to_list)
        | None => `Null
        };
      }
      and nullableOfNullable = {
        let value = (value: t).nullableOfNullable;
        switch (value) {
        | Some(value) =>
          `List(
            value
            |> Array.map(value =>
                 switch (value) {
                 | Some(value) => `String(value)
                 | None => `Null
                 }
               )
            |> Array.to_list,
          )
        | None => `Null
        };
      };
      `Assoc([
        (\"nullableOfNullable\", nullableOfNullable),
        (\"nullableOfNonNullable\", nullableOfNonNullable),
      ]);
    };
  let verifyArgsAndParse =
      (~fragmentName as _ListFragment: [ | `ListFragment], value: Raw.t) =>
    parse(value);
  let verifyName =
    fun
    | `ListFragment => ();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
};

