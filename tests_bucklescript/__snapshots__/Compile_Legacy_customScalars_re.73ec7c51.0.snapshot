Compile Legacy › customScalars.re › output
// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Caml_option = require(\"bs-platform/lib/js/caml_option.js\");

var Raw = { };

var query = \"query ($opt: CustomScalar, $req: CustomScalar!)  {\\ncustomScalarField(argOptional: $opt, argRequired: $req)  {\\nnullable  \\nnonNullable  \\n}\\n\\n}\\n\";

function parse(value) {
  var value$1 = value.customScalarField;
  var value$2 = value$1.nonNullable;
  var value$3 = value$1.nullable;
  var nullable = !(value$3 == null) ? Caml_option.some(value$3) : undefined;
  return {
          customScalarField: {
            nullable: nullable,
            nonNullable: value$2
          }
        };
}

function serialize(value) {
  var value$1 = value.customScalarField;
  var value$2 = value$1.nonNullable;
  var value$3 = value$1.nullable;
  var nullable = value$3 !== undefined ? Caml_option.valFromOption(value$3) : null;
  return {
          customScalarField: {
            nullable: nullable,
            nonNullable: value$2
          }
        };
}

function serializeVariables(inp) {
  var a = inp.opt;
  return {
          opt: a !== undefined ? Caml_option.valFromOption(a) : undefined,
          req: inp.req
        };
}

function make(opt, req, param) {
  return {
          query: query,
          variables: serializeVariables({
                opt: opt,
                req: req
              }),
          parse: parse
        };
}

function makeVariables(opt, req, param) {
  return serializeVariables({
              opt: opt,
              req: req
            });
}

function makeWithVariables(variables) {
  return {
          query: query,
          variables: serializeVariables(variables),
          parse: parse
        };
}

var Z__INTERNAL = {
  graphql_module: 0
};

var MyQuery = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  make: make,
  makeVariables: makeVariables,
  makeWithVariables: makeWithVariables,
  Z__INTERNAL: Z__INTERNAL
};

exports.MyQuery = MyQuery;
/* No side effect */

