Generate Template › inlineFragmentQuery.re › output
[@ocaml.ppx.context
  {
    tool_name: \"migrate_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module ListFragment: {
  [@ocaml.warning \"-32\"];
  module Raw: {
    type t = {
      nullableOfNullable: Js.Nullable.t(array(Js.Nullable.t(string))),
      nullableOfNonNullable: Js.Nullable.t(array(string)),
    };
    type nonrec t_Lists = t;
  };
  type t = {
    nullableOfNullable: option(array(option(string))),
    nullableOfNonNullable: option(array(string)),
  };
  type nonrec t_Lists = t;
  /** the GraphQL fragment */
  let query: string;
  /** Parse the raw JSON-compatible GraphQL data into ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data */
  let serialize: t => Raw.t;
  let verifyArgsAndParse: (~fragmentName: [ | `ListFragment], Raw.t) => t;
  let verifyName: [ | `ListFragment] => unit;
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t = {
      nullableOfNullable: Js.Nullable.t(array(Js.Nullable.t(string))),
      nullableOfNonNullable: Js.Nullable.t(array(string)),
    };
    type nonrec t_Lists = t;
  };
  type t = {
    nullableOfNullable: option(array(option(string))),
    nullableOfNonNullable: option(array(string)),
  };
  type nonrec t_Lists = t;
  let query: string = [%raw
    \"require(\\\"gql\\\")`\\n  fragment ListFragment on Lists   {\\n    nullableOfNullable\\n    nullableOfNonNullable\\n  }\\n`\"
  ];
  let parse: Raw.t => t =
    (value) => (
      {
        nullableOfNullable: {
          let value = (value: Raw.t).nullableOfNullable;
          switch (Js.toOption(value)) {
          | Some(value) =>
            Some(
              value
              |> Js.Array.map(value =>
                   switch (Js.toOption(value)) {
                   | Some(value) => Some(value)
                   | None => None
                   }
                 ),
            )
          | None => None
          };
        },
        nullableOfNonNullable: {
          let value = (value: Raw.t).nullableOfNonNullable;
          switch (Js.toOption(value)) {
          | Some(value) => Some(value |> Js.Array.map(value => value))
          | None => None
          };
        },
      }: t
    );
  let serialize: t => Raw.t =
    (value) => (
      {
        let nullableOfNonNullable = {
          let value = (value: t).nullableOfNonNullable;
          switch (value) {
          | Some(value) =>
            Js.Nullable.return(value |> Js.Array.map(value => value))
          | None => Js.Nullable.null
          };
        }
        and nullableOfNullable = {
          let value = (value: t).nullableOfNullable;
          switch (value) {
          | Some(value) =>
            Js.Nullable.return(
              value
              |> Js.Array.map(value =>
                   switch (value) {
                   | Some(value) => Js.Nullable.return(value)
                   | None => Js.Nullable.null
                   }
                 ),
            )
          | None => Js.Nullable.null
          };
        };
        {nullableOfNullable, nullableOfNonNullable};
      }: Raw.t
    );
  let verifyArgsAndParse =
      (~fragmentName as _ListFragment: [ | `ListFragment], value: Raw.t) =>
    parse(value);
  let verifyName =
    fun
    | `ListFragment => ();
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
};

