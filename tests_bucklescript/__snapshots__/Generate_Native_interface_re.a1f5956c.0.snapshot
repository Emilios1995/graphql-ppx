Generate Native â€º interface.re â€º output
[@ocaml.ppx.context
  {
    tool_name: \"migrate_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module GraphQL_PPX = {
  let deepMerge = (json1, _) => json1;
};
module QueryWithOnlyFragments: {
  module Raw: {
    type t;
    type t_variables;
  };
  type t_users_User_AnonymousUser = {
    id: string,
    anonymousId: int,
  };
  type t_users_User_AdminUser = {
    id: string,
    name: string,
  };
  type t_users_User = [
    | `UnspecifiedFragment(string)
    | `AnonymousUser(t_users_User_AnonymousUser)
    | `AdminUser(t_users_User_AdminUser)
  ];
  type t = {users: array(t_users_User)};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => unit;
  let makeVariables: unit => unit;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t = Yojson.Basic.json;
    type t_variables = Yojson.Basic.json;
  };
  type t_users_User_AnonymousUser = {
    id: string,
    anonymousId: int,
  };
  type t_users_User_AdminUser = {
    id: string,
    name: string,
  };
  type t_users_User = [
    | `UnspecifiedFragment(string)
    | `AnonymousUser(t_users_User_AnonymousUser)
    | `AdminUser(t_users_User_AdminUser)
  ];
  type t = {users: array(t_users_User)};
  type t_variables = unit;
  let query = \"query   {\\nusers  {\\n__typename\\n...on AdminUser   {\\nid  \\nname  \\n}\\n\\n...on AnonymousUser   {\\nid  \\nanonymousId  \\n}\\n\\n}\\n\\n}\\n\";
  let parse: Raw.t => t =
    (value) => (
      {
        users: {
          let value = Yojson.Basic.member(\"users\", value);
          switch (value) {
          | `List(json_list) =>
            List.map(json_list =>
              let typename: string =
                value |> Yojson.Basic.member(\"__typename\") |> Yojson.to_string;
              (
                switch (typename) {
                | \"AnonymousUser\" =>
                  `AnonymousUser(
                    {
                      id: {
                        let value = Yojson.Basic.member(\"id\", value);
                        Yojson.Basic.to_string(value);
                      },
                      anonymousId: {
                        let value = Yojson.Basic.member(\"anonymousId\", value);
                        Yojson.Basic.to_int(value);
                      },
                    }: t_users_User_AnonymousUser,
                  )
                | \"AdminUser\" =>
                  `AdminUser(
                    {
                      id: {
                        let value = Yojson.Basic.member(\"id\", value);
                        Yojson.Basic.to_string(value);
                      },
                      name: {
                        let value = Yojson.Basic.member(\"name\", value);
                        Yojson.Basic.to_string(value);
                      },
                    }: t_users_User_AdminUser,
                  )
                | _ => `UnspecifiedFragment(typename)
                }: t_users_User
              );
            )
            |> Array.of_list
          | _ => []
          };
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let users = {
        let value = (value: t).users;
        `List(
          value
          |> Array.map(value =>
               switch (value) {
               | `AnonymousUser(value) =>
                 let anonymousId = {
                   let value = (value: t_users_User_AnonymousUser).anonymousId;
                   value;
                 }
                 and id = {
                   let value = (value: t_users_User_AnonymousUser).id;
                   value;
                 };
                 {__typename: \"AnonymousUser\", id, anonymousId};
               | `AdminUser(value) =>
                 let name = {
                   let value = (value: t_users_User_AdminUser).name;
                   value;
                 }
                 and id = {
                   let value = (value: t_users_User_AdminUser).id;
                   value;
                 };
                 {__typename: \"AdminUser\", id, name};
               | `UnspecifiedFragment(_) => `Assoc([])
               }
             )
          |> Array.to_list,
        );
      };
      {users: users};
    };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};
module QueryWithTypename: {
  module Raw: {
    type t;
    type t_variables;
  };
  type t_users_User_AdminUser = {
    __typename: string,
    id: string,
  };
  type t_users_User = [
    | `UnspecifiedFragment(string)
    | `AdminUser(t_users_User_AdminUser)
  ];
  type t = {users: array(t_users_User)};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => unit;
  let makeVariables: unit => unit;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t = Yojson.Basic.json;
    type t_variables = Yojson.Basic.json;
  };
  type t_users_User_AdminUser = {
    __typename: string,
    id: string,
  };
  type t_users_User = [
    | `UnspecifiedFragment(string)
    | `AdminUser(t_users_User_AdminUser)
  ];
  type t = {users: array(t_users_User)};
  type t_variables = unit;
  let query = \"query   {\\nusers  {\\n__typename\\n...on AdminUser   {\\n__typename  \\nid  \\n}\\n\\n}\\n\\n}\\n\";
  let parse: Raw.t => t =
    (value) => (
      {
        users: {
          let value = Yojson.Basic.member(\"users\", value);
          switch (value) {
          | `List(json_list) =>
            List.map(json_list =>
              let typename: string =
                value |> Yojson.Basic.member(\"__typename\") |> Yojson.to_string;
              (
                switch (typename) {
                | \"AdminUser\" =>
                  `AdminUser(
                    {
                      __typename: {
                        let value = Yojson.Basic.member(\"__typename\", value);
                        Yojson.Basic.to_string(value);
                      },
                      id: {
                        let value = Yojson.Basic.member(\"id\", value);
                        Yojson.Basic.to_string(value);
                      },
                    }: t_users_User_AdminUser,
                  )
                | _ => `UnspecifiedFragment(typename)
                }: t_users_User
              );
            )
            |> Array.of_list
          | _ => []
          };
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let users = {
        let value = (value: t).users;
        `List(
          value
          |> Array.map(value =>
               switch (value) {
               | `AdminUser(value) =>
                 let id = {
                   let value = (value: t_users_User_AdminUser).id;
                   value;
                 }
                 and __typename = {
                   let value = (value: t_users_User_AdminUser).__typename;
                   value;
                 };
                 {__typename: \"AdminUser\", id};
               | `UnspecifiedFragment(_) => `Assoc([])
               }
             )
          |> Array.to_list,
        );
      };
      {users: users};
    };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};
module QueryWithMixedFragments: {
  module Raw: {
    type t;
    type t_variables;
  };
  type t_users_User_AnonymousUser = {anonymousId: int};
  type t_users_User_AdminUser = {name: string};
  type t_users_User = [
    | `UnspecifiedFragment(string)
    | `AnonymousUser(t_users_User_AnonymousUser)
    | `AdminUser(t_users_User_AdminUser)
  ];
  type t_users = {
    fragment: t_users_User,
    id: string,
  };
  type t = {users: array(t_users)};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => unit;
  let makeVariables: unit => unit;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t = Yojson.Basic.json;
    type t_variables = Yojson.Basic.json;
  };
  type t_users_User_AnonymousUser = {anonymousId: int};
  type t_users_User_AdminUser = {name: string};
  type t_users_User = [
    | `UnspecifiedFragment(string)
    | `AnonymousUser(t_users_User_AnonymousUser)
    | `AdminUser(t_users_User_AdminUser)
  ];
  type t_users = {
    fragment: t_users_User,
    id: string,
  };
  type t = {users: array(t_users)};
  type t_variables = unit;
  let query = \"query   {\\nusers  {\\n__typename\\nid  \\n...on AdminUser   {\\nname  \\n}\\n\\n...on AnonymousUser   {\\nanonymousId  \\n}\\n\\n}\\n\\n}\\n\";
  let parse: Raw.t => t =
    (value) => (
      {
        users: {
          let value = Yojson.Basic.member(\"users\", value);
          switch (value) {
          | `List(json_list) =>
            List.map((json_list) =>
              (
                {
                  fragment: {
                    let typename: string =
                      value
                      |> Yojson.Basic.member(\"__typename\")
                      |> Yojson.to_string;
                    (
                      switch (typename) {
                      | \"AnonymousUser\" =>
                        `AnonymousUser(
                          {
                            anonymousId: {
                              let value =
                                Yojson.Basic.member(\"anonymousId\", value);
                              Yojson.Basic.to_int(value);
                            },
                          }: t_users_User_AnonymousUser,
                        )
                      | \"AdminUser\" =>
                        `AdminUser(
                          {
                            name: {
                              let value = Yojson.Basic.member(\"name\", value);
                              Yojson.Basic.to_string(value);
                            },
                          }: t_users_User_AdminUser,
                        )
                      | _ => `UnspecifiedFragment(typename)
                      }: t_users_User
                    );
                  },
                  id: {
                    let value = Yojson.Basic.member(\"id\", value);
                    Yojson.Basic.to_string(value);
                  },
                }: t_users
              )
            )
            |> Array.of_list
          | _ => []
          };
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let users = {
        let value = (value: t).users;
        `List(
          value
          |> Array.map(value =>
               Array.fold_left(
                 (_, b) => b,
                 {
                   let id = {
                     let value = (value: t_users).id;
                     value;
                   };
                   {\"id\": id};
                 },
                 [|
                   {
                     let value = (value: t_users).fragment;
                     switch (value) {
                     | `AnonymousUser(value) =>
                       let anonymousId = {
                         let value =
                           (value: t_users_User_AnonymousUser).anonymousId;
                         value;
                       };
                       {__typename: \"AnonymousUser\", anonymousId};
                     | `AdminUser(value) =>
                       let name = {
                         let value = (value: t_users_User_AdminUser).name;
                         value;
                       };
                       {__typename: \"AdminUser\", name};
                     | `UnspecifiedFragment(_) => `Assoc([])
                     };
                   },
                 |],
               )
             )
          |> Array.to_list,
        );
      };
      {users: users};
    };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};
module MixedQueryWithTypename: {
  module Raw: {
    type t;
    type t_variables;
  };
  type t_users_User_AdminUser = {
    __typename: string,
    id: string,
  };
  type t_users_User = [
    | `UnspecifiedFragment(string)
    | `AdminUser(t_users_User_AdminUser)
  ];
  type t_users = {
    fragment: t_users_User,
    __typename: string,
    id: string,
  };
  type t = {users: array(t_users)};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => unit;
  let makeVariables: unit => unit;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t = Yojson.Basic.json;
    type t_variables = Yojson.Basic.json;
  };
  type t_users_User_AdminUser = {
    __typename: string,
    id: string,
  };
  type t_users_User = [
    | `UnspecifiedFragment(string)
    | `AdminUser(t_users_User_AdminUser)
  ];
  type t_users = {
    fragment: t_users_User,
    __typename: string,
    id: string,
  };
  type t = {users: array(t_users)};
  type t_variables = unit;
  let query = \"query   {\\nusers  {\\n__typename\\nid  \\n__typename  \\n...on AdminUser   {\\n__typename  \\nid  \\n}\\n\\n}\\n\\n}\\n\";
  let parse: Raw.t => t =
    (value) => (
      {
        users: {
          let value = Yojson.Basic.member(\"users\", value);
          switch (value) {
          | `List(json_list) =>
            List.map((json_list) =>
              (
                {
                  fragment: {
                    let typename: string =
                      value
                      |> Yojson.Basic.member(\"__typename\")
                      |> Yojson.to_string;
                    (
                      switch (typename) {
                      | \"AdminUser\" =>
                        `AdminUser(
                          {
                            __typename: {
                              let value =
                                Yojson.Basic.member(\"__typename\", value);
                              Yojson.Basic.to_string(value);
                            },
                            id: {
                              let value = Yojson.Basic.member(\"id\", value);
                              Yojson.Basic.to_string(value);
                            },
                          }: t_users_User_AdminUser,
                        )
                      | _ => `UnspecifiedFragment(typename)
                      }: t_users_User
                    );
                  },
                  __typename: {
                    let value = Yojson.Basic.member(\"__typename\", value);
                    Yojson.Basic.to_string(value);
                  },
                  id: {
                    let value = Yojson.Basic.member(\"id\", value);
                    Yojson.Basic.to_string(value);
                  },
                }: t_users
              )
            )
            |> Array.of_list
          | _ => []
          };
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let users = {
        let value = (value: t).users;
        `List(
          value
          |> Array.map(value =>
               Array.fold_left(
                 (_, b) => b,
                 {
                   let id = {
                     let value = (value: t_users).id;
                     value;
                   }
                   and __typename = {
                     let value = (value: t_users).__typename;
                     value;
                   };
                   {\"__typename\": __typename, \"id\": id};
                 },
                 [|
                   {
                     let value = (value: t_users).fragment;
                     switch (value) {
                     | `AdminUser(value) =>
                       let id = {
                         let value = (value: t_users_User_AdminUser).id;
                         value;
                       }
                       and __typename = {
                         let value =
                           (value: t_users_User_AdminUser).__typename;
                         value;
                       };
                       {__typename: \"AdminUser\", id};
                     | `UnspecifiedFragment(_) => `Assoc([])
                     };
                   },
                 |],
               )
             )
          |> Array.to_list,
        );
      };
      {users: users};
    };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};
module QueryWithoutFragments: {
  module Raw: {
    type t;
    type t_variables;
  };
  type t_users = {id: string};
  type t = {users: array(t_users)};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => unit;
  let makeVariables: unit => unit;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t = Yojson.Basic.json;
    type t_variables = Yojson.Basic.json;
  };
  type t_users = {id: string};
  type t = {users: array(t_users)};
  type t_variables = unit;
  let query = \"query   {\\nusers  {\\n__typename\\nid  \\n}\\n\\n}\\n\";
  let parse: Raw.t => t =
    (value) => (
      {
        users: {
          let value = Yojson.Basic.member(\"users\", value);
          switch (value) {
          | `List(json_list) =>
            List.map((json_list) =>
              (
                {
                  id: {
                    let value = Yojson.Basic.member(\"id\", value);
                    Yojson.Basic.to_string(value);
                  },
                }: t_users
              )
            )
            |> Array.of_list
          | _ => []
          };
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let users = {
        let value = (value: t).users;
        `List(
          value
          |> Array.map(value =>
               let id = {
                 let value = (value: t_users).id;
                 value;
               };
               {id: id};
             )
          |> Array.to_list,
        );
      };
      {users: users};
    };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};

