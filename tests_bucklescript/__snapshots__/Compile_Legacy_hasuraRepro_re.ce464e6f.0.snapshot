Compile Legacy › hasuraRepro.re › output
// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';


var Raw = {};

var query = \"fragment Dog on Dog   {\\nname  \\n}\\n\";

function parse(value) {
  return {
          name: value.name
        };
}

function verifyArgsAndParse(_Dog, value) {
  return parse(value);
}

function serialize(value) {
  return {
          name: value.name
        };
}

function verifyName(param) {
  
}

var Z__INTERNAL = {
  graphql: 0,
  graphql_module: 0
};

var Dog = {
  Raw: Raw,
  query: query,
  parse: parse,
  verifyArgsAndParse: verifyArgsAndParse,
  serialize: serialize,
  verifyName: verifyName,
  Z__INTERNAL: Z__INTERNAL
};

var Raw$1 = {};

var query$1 = \"query HasuraRepro($blockNumber: Int, $type: String)  {\\nhasuraRepro(orderBy: [{id: desc}], block: {number: $blockNumber, type: $type})  {\\n...Dog   \\n}\\n\\n}\\nfragment Dog on Dog   {\\nname  \\n}\\n\";

function parse$1(value) {
  var value$1 = value.hasuraRepro;
  return {
          hasuraRepro: parse(value$1)
        };
}

function serialize$1(value) {
  var value$1 = value.hasuraRepro;
  return {
          hasuraRepro: serialize(value$1)
        };
}

function serializeVariables(inp) {
  var a = inp.blockNumber;
  var a$1 = inp.type_;
  return {
          blockNumber: a !== undefined ? a : undefined,
          type_: a$1 !== undefined ? a$1 : undefined
        };
}

function make(blockNumber, type_, param) {
  return {
          query: query$1,
          variables: serializeVariables({
                blockNumber: blockNumber,
                type_: type_
              }),
          parse: parse$1
        };
}

function makeVariables(blockNumber, type_, param) {
  return serializeVariables({
              blockNumber: blockNumber,
              type_: type_
            });
}

function makeDefaultVariables(param) {
  return makeVariables(undefined, undefined, undefined);
}

function makeWithVariables(variables) {
  return {
          query: query$1,
          variables: serializeVariables(variables),
          parse: parse$1
        };
}

var Z__INTERNAL$1 = {
  graphql_module: 0
};

var HasuraRepro = {
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables,
  make: make,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables,
  makeWithVariables: makeWithVariables,
  Z__INTERNAL: Z__INTERNAL$1
};

makeVariables(1, \"1\", undefined);

exports.Dog = Dog;
exports.HasuraRepro = HasuraRepro;
/*  Not a pure module */

