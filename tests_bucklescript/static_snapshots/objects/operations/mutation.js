// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Caml_option = require("bs-platform/lib/js/caml_option.js");

var Raw = { };

var query = "mutation   {\nmutationWithError  {\nvalue  {\nstringField  \n}\n\nerrors  {\nfield  \nmessage  \n}\n\n}\n\n}\n";

function parse(value) {
  var value$1 = value.mutationWithError;
  var value$2 = value$1.errors;
  var errors = (value$2 == null) ? undefined : value$2.map((function (value) {
            var value$1 = value.message;
            var value$2 = value.field;
            var field;
            switch (value$2) {
              case "FIRST" :
                  field = /* FIRST */-24399856;
                  break;
              case "SECOND" :
                  field = /* SECOND */382368628;
                  break;
              case "THIRD" :
                  field = /* THIRD */225952583;
                  break;
              default:
                field = /* `FutureAddedValue */[
                  -31101740,
                  value$2
                ];
            }
            return {
                    field: field,
                    message: value$1
                  };
          }));
  var value$3 = value$1.value;
  var value$4 = (value$3 == null) ? undefined : ({
        stringField: value$3.stringField
      });
  return {
          mutationWithError: {
            value: value$4,
            errors: errors
          }
        };
}

function serialize(value) {
  var value$1 = value.mutationWithError;
  var value$2 = value$1.errors;
  var errors = value$2 !== undefined ? value$2.map((function (value) {
            var value$1 = value.message;
            var value$2 = value.field;
            var field = typeof value$2 === "number" ? (
                value$2 !== 225952583 ? (
                    value$2 >= 382368628 ? "SECOND" : "FIRST"
                  ) : "THIRD"
              ) : value$2[1];
            return {
                    field: field,
                    message: value$1
                  };
          })) : null;
  var value$3 = value$1.value;
  var value$4 = value$3 !== undefined ? ({
        stringField: Caml_option.valFromOption(value$3).stringField
      }) : null;
  return {
          mutationWithError: {
            value: value$4,
            errors: errors
          }
        };
}

var definition = /* tuple */[
  parse,
  query,
  serialize
];

var Z__INTERNAL = {
  graphql_module: 0
};

var MyQuery = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  definition: definition,
  Z__INTERNAL: Z__INTERNAL
};

exports.MyQuery = MyQuery;
/* No side effect */
