[@ocaml.ppx.context
  {
    tool_name: "migrate_driver",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module MyQuery = {
  module Raw = {
    type t_v1 = {
      .
      "nullableString": Js.Nullable.t(string),
      "string": Js.Nullable.t(string),
    };
    type t_v2 = {
      .
      "nullableString": Js.Nullable.t(string),
      "string": Js.Nullable.t(string),
    };
    type t = {
      .
      "v1": t_v1,
      "v2": t_v2,
    };
    type t_variables = {. "var": bool};
  };
  let query = "query ($var: Boolean!)  {\nv1: variousScalars  {\nnullableString @skip(if: $var) \nstring @skip(if: $var) \n}\n\nv2: variousScalars  {\nnullableString @include(if: $var) \nstring @include(if: $var) \n}\n\n}\n";
  type t_v1 = {
    .
    "nullableString": option(string),
    "string": option(string),
  };
  type t_v2 = {
    .
    "nullableString": option(string),
    "string": option(string),
  };
  type t = {
    .
    "v1": t_v1,
    "v2": t_v2,
  };
  type t_variables = {. "var": bool};
  let parse: Raw.t => t =
    value => {
      let v2 = {
        let value = value##v2;
        let string = {
          let value = value##string;
          switch (Js.toOption(value)) {
          | Some(value) => Some(value)
          | None => None
          };
        }
        and nullableString = {
          let value = value##nullableString;
          switch (Js.toOption(value)) {
          | Some(value) => Some(value)
          | None => None
          };
        };
        {"nullableString": nullableString, "string": string};
      }
      and v1 = {
        let value = value##v1;
        let string = {
          let value = value##string;
          switch (Js.toOption(value)) {
          | Some(value) => Some(value)
          | None => None
          };
        }
        and nullableString = {
          let value = value##nullableString;
          switch (Js.toOption(value)) {
          | Some(value) => Some(value)
          | None => None
          };
        };
        {"nullableString": nullableString, "string": string};
      };
      {"v1": v1, "v2": v2};
    };
  let serialize: t => Raw.t =
    value => {
      let v2 = {
        let value = value##v2;
        let string = {
          let value = value##string;
          switch (value) {
          | Some(value) => Js.Nullable.return(value)
          | None => Js.Nullable.null
          };
        }
        and nullableString = {
          let value = value##nullableString;
          switch (value) {
          | Some(value) => Js.Nullable.return(value)
          | None => Js.Nullable.null
          };
        };
        {"nullableString": nullableString, "string": string};
      }
      and v1 = {
        let value = value##v1;
        let string = {
          let value = value##string;
          switch (value) {
          | Some(value) => Js.Nullable.return(value)
          | None => Js.Nullable.null
          };
        }
        and nullableString = {
          let value = value##nullableString;
          switch (value) {
          | Some(value) => Js.Nullable.return(value)
          | None => Js.Nullable.null
          };
        };
        {"nullableString": nullableString, "string": string};
      };
      {"v1": v1, "v2": v2};
    };
  let serializeVariables: t_variables => Raw.t_variables =
    inp => {"var": (a => a)(inp##var)};
  let makeVariables = (~var, ()) =>
    serializeVariables({"var": var}: t_variables);
  module Z__INTERNAL = {
    type root = t;
    type nonrec graphql_module;
    /****--- GraphQL PPX Module ---**

The contents of this module are automatically generated by `graphql-ppx`.
The following is simply an overview of the most important variables and types that you can access from this module.

```
module MyQuery {
  // This is the stringified representation of your query, which gets sent to the server.
  let query: string;

  // This is the main type of the result you will get back.
  // You can hover above the identifier key (e.g. query or mutation) to see the fully generated type for your module.
  type t;

  // This function turns your raw result from the server into the reason/ocaml representation of that result.
  // Depending on your graphql client library, this process should happen automatically for you.
  let parse: Raw.t => t;

  // This function will prepare your data for sending it back to the server.
  // Depending on your graphql client library, this process should happen automatically for you.
  let serialize: t => Raw.t;

  // The definition tuple is primarily used to interact with client libraries.
  // The types are equivalent to: (parse, query, serialize).
  // Your client library will use these values to provide the properly parsed / serialized data for you.
  let definition: (
    Raw.t => t,
    string,
    t => Raw.t
  );

  // This is the representation of your raw result coming from the server.
  // It should not be necessary to access the types inside for normal use cases.
  module Raw: { type t; };
}
```*/
    let graphql_module: graphql_module = Obj.magic(0);
  };
};
