// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var GraphQL_PPX = require("../utils/graphQL_PPX.bs.js");

var query = "fragment ListFragment on Lists   {\nnullableOfNullable  \nnullableOfNonNullable  \n}\n";

var Raw = { };

function parse(value) {
  var value$1 = value.nullableOfNullable;
  var value$2 = value.nullableOfNonNullable;
  return {
          nullableOfNullable: (value$1 == null) ? undefined : value$1.map((function (value) {
                    if (value == null) {
                      return ;
                    } else {
                      return value;
                    }
                  })),
          nullableOfNonNullable: (value$2 == null) ? undefined : value$2.map((function (value) {
                    return value;
                  }))
        };
}

function serialize(value) {
  var value$1 = value.nullableOfNonNullable;
  var nullableOfNonNullable = value$1 !== undefined ? value$1.map((function (value) {
            return value;
          })) : null;
  var value$2 = value.nullableOfNullable;
  var nullableOfNullable = value$2 !== undefined ? value$2.map((function (value) {
            if (value !== undefined) {
              return value;
            } else {
              return null;
            }
          })) : null;
  return {
          nullableOfNullable: nullableOfNullable,
          nullableOfNonNullable: nullableOfNonNullable
        };
}

var name = "ListFragment";

var Z__INTERNAL = {
  graphql: 0,
  graphql_module: 0
};

var ListFragment = {
  query: query,
  Raw: Raw,
  parse: parse,
  serialize: serialize,
  name: name,
  Z__INTERNAL: Z__INTERNAL
};

var Raw$1 = { };

function parse$1(value) {
  var value$1 = value.nullableOfNonNullable;
  return {
          nullableOfNonNullable: (value$1 == null) ? undefined : value$1.map((function (value) {
                    return value;
                  }))
        };
}

function serialize$1(value) {
  var value$1 = value.nullableOfNonNullable;
  var nullableOfNonNullable = value$1 !== undefined ? value$1.map((function (value) {
            return value;
          })) : null;
  return {
          nullableOfNonNullable: nullableOfNonNullable
        };
}

var Z__INTERNAL$1 = {
  graphql: 0,
  graphql_module: 0
};

var Another = {
  query: "fragment Another on Lists   {\nnullableOfNonNullable  \n}\n",
  Raw: Raw$1,
  parse: parse$1,
  serialize: serialize$1,
  name: "Another",
  Z__INTERNAL: Z__INTERNAL$1
};

var Fragments = {
  ListFragment: ListFragment,
  Another: Another
};

var Raw$2 = { };

var query$1 = "query   {\nl1: lists  {\n...ListFragment   \n}\n\nl2: lists  {\n...ListFragment   \n...ListFragment   \n}\n\nl3: lists  {\nnullableOfNullable  \n...ListFragment   \n...ListFragment   \n}\n\nl4: lists  {\nnullableOfNullable  \n...ListFragment   \n}\n\n}\nfragment ListFragment on Lists   {\nnullableOfNullable  \nnullableOfNonNullable  \n}\n";

function parse$2(value) {
  var value$1 = value.l2;
  var value$2 = value.l3;
  var value$3 = value$2["nullableOfNullable"];
  var value$4 = value.l4;
  var value$5 = value$4["nullableOfNullable"];
  return {
          l1: parse(value.l1),
          l2: {
            frag1: parse(value$1),
            frag2: parse(value$1)
          },
          l3: {
            nullableOfNullable: (value$3 == null) ? undefined : value$3.map((function (value) {
                      if (value == null) {
                        return ;
                      } else {
                        return value;
                      }
                    })),
            frag1: parse(value$2),
            frag2: parse(value$2)
          },
          l4: {
            nullableOfNullable: (value$5 == null) ? undefined : value$5.map((function (value) {
                      if (value == null) {
                        return ;
                      } else {
                        return value;
                      }
                    })),
            listFragment: parse(value$4)
          }
        };
}

function serialize$2(value) {
  var value$1 = value.l4;
  var value$2 = value$1.nullableOfNullable;
  var l4 = [serialize(value$1.listFragment)].reduce(GraphQL_PPX.deepMerge, {
        nullableOfNullable: value$2 !== undefined ? value$2.map((function (value) {
                  if (value !== undefined) {
                    return value;
                  } else {
                    return null;
                  }
                })) : null
      });
  var value$3 = value.l3;
  var value$4 = value$3.nullableOfNullable;
  var l3 = [
      serialize(value$3.frag1),
      serialize(value$3.frag2)
    ].reduce(GraphQL_PPX.deepMerge, {
        nullableOfNullable: value$4 !== undefined ? value$4.map((function (value) {
                  if (value !== undefined) {
                    return value;
                  } else {
                    return null;
                  }
                })) : null
      });
  var value$5 = value.l2;
  var l2 = [
      serialize(value$5.frag1),
      serialize(value$5.frag2)
    ].reduce(GraphQL_PPX.deepMerge, (function (prim) {
          return { };
        }));
  var value$6 = value.l1;
  var l1 = serialize(value$6);
  return {
          l1: l1,
          l2: l2,
          l3: l3,
          l4: l4
        };
}

var Z__INTERNAL$2 = {
  graphql_module: 0
};

var MyQuery = {
  Raw: Raw$2,
  query: query$1,
  parse: parse$2,
  serialize: serialize$2,
  Z__INTERNAL: Z__INTERNAL$2
};

var Raw$3 = { };

var query$2 = "query   {\nlists  {\n...ListFragment   \n}\n\n}\nfragment ListFragment on Lists   {\nnullableOfNullable  \nnullableOfNonNullable  \n}\n";

function parse$3(value) {
  return {
          lists: parse(value.lists)
        };
}

function serialize$3(value) {
  var value$1 = value.lists;
  var lists = serialize(value$1);
  return {
          lists: lists
        };
}

var Z__INTERNAL$3 = {
  graphql_module: 0
};

var MyQuery2 = {
  Raw: Raw$3,
  query: query$2,
  parse: parse$3,
  serialize: serialize$3,
  Z__INTERNAL: Z__INTERNAL$3
};

exports.Fragments = Fragments;
exports.MyQuery = MyQuery;
exports.MyQuery2 = MyQuery2;
/* No side effect */
