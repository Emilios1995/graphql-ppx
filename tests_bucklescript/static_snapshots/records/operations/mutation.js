// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';


var Raw = { };

var query = "mutation   {\nmutationWithError  {\nvalue  {\nstringField  \n}\n\nerrors  {\nfield  \nmessage  \n}\n\n}\n\n}\n";

function parse(value) {
  var value$1 = value.mutationWithError;
  var value$2 = value$1.value;
  var value$3 = value$1.errors;
  return {
          mutationWithError: {
            value: (value$2 == null) ? undefined : ({
                  stringField: value$2.stringField
                }),
            errors: (value$3 == null) ? undefined : value$3.map((function (value) {
                      var value$1 = value.field;
                      var tmp;
                      switch (value$1) {
                        case "FIRST" :
                            tmp = /* FIRST */-24399856;
                            break;
                        case "SECOND" :
                            tmp = /* SECOND */382368628;
                            break;
                        case "THIRD" :
                            tmp = /* THIRD */225952583;
                            break;
                        default:
                          tmp = /* `FutureAddedValue */[
                            -31101740,
                            value$1
                          ];
                      }
                      return {
                              field: tmp,
                              message: value.message
                            };
                    }))
          }
        };
}

function serialize(value) {
  var value$1 = value.mutationWithError;
  var value$2 = value$1.errors;
  var errors = value$2 !== undefined ? value$2.map((function (value) {
            var value$1 = value.message;
            var value$2 = value.field;
            var field = typeof value$2 === "number" ? (
                value$2 !== 225952583 ? (
                    value$2 >= 382368628 ? "SECOND" : "FIRST"
                  ) : "THIRD"
              ) : value$2[1];
            return {
                    field: field,
                    message: value$1
                  };
          })) : null;
  var value$3 = value$1.value;
  var value$4;
  if (value$3 !== undefined) {
    var value$5 = value$3.stringField;
    value$4 = {
      stringField: value$5
    };
  } else {
    value$4 = null;
  }
  var mutationWithError = {
    value: value$4,
    errors: errors
  };
  return {
          mutationWithError: mutationWithError
        };
}

var Z__INTERNAL = {
  graphql_module: 0
};

var MyQuery$prime = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  Z__INTERNAL: Z__INTERNAL
};

var MyQuery = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  Z__INTERNAL: Z__INTERNAL,
  self: MyQuery$prime
};

exports.MyQuery$prime = MyQuery$prime;
exports.MyQuery = MyQuery;
/* No side effect */
