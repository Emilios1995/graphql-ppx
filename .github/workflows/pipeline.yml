name: graphql-ppx-pipeline

on: [pull_request, push]

jobs:
  test_and_build_linux:
    name: ${{ matrix.os }}/node
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - uses: EduardoRFS/github-action@c3a9f3f
        with:
          cache-key: ${{ hashFiles('esy.lock/index.json') }}
          manifest: "macos.arm64"

      - uses: EduardoRFS/github-action@c3a9f3f
        with:
          cache-key: ${{ hashFiles('esy.lock/index.json') }}
          manifest: "linux.musl.x86_64"

      - name: test-native
        run: |
          esy b dune runtest -f
        env:
          CI: true

      - name: test-bucklescript
        env:
          GRAPHQL_CI: true
        run: |
          npm ci --no-optional --ignore-scripts
          esy test
          esy release-static


      - name: (only on release) Upload artifacts macos-arm
        uses: actions/upload-artifact@master
        with:
          name: macOS-arm64-latest
          path: _esy/macos.arm64/build/default.macos.arm64/src/bucklescript_bin/bin.exe

      - name: (only on release) Upload artifacts linux-musl
        uses: actions/upload-artifact@master
        with:
          name: ubuntu-latest
          path: _esy/linux.musl.x86_64/build/default.linux.musl.x86_64/src/bucklescript_bin/bin.exe

  test_and_build:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macOS-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        if: ${{ matrix.os != 'macos-arm64-latest' }}
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install esy
        run: |
          arch
          npm install -g esy

      - uses: esy/github-action@master
        with:
          cache-key: ${{ hashFiles('esy.lock/index.json') }}

      - name: test-native
        run: |
          esy b dune runtest -f
        env:
          CI: true

      - name: test-bucklescript
        if: runner.os != 'Windows'
        run: |
          npm ci --no-optional
          esy test
        env:
          GRAPHQL_CI: true

      - name: (only on release) Upload artifacts ${{ matrix.os }}
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.os }}
          path: _build/default/src/bucklescript_bin/bin.exe

  publish:
    needs: [test_and_build, test_and_build_linux]
    name: (only on release) Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
          registry-url: "https://registry.npmjs.org"

      - name: Download linux artifacts
        if: success()
        uses: actions/download-artifact@master
        with:
          name: ubuntu-latest
          path: binaries/linux

      - name: Download macOS artifacts
        if: success()
        uses: actions/download-artifact@master
        with:
          name: macOS-latest
          path: binaries/darwin

      - name: Download Apple Silicon macOS artifacts
        if: success()
        uses: actions/download-artifact@master
        with:
          name: macOS-arm64-latest
          path: binaries/darwin-arm64

      - name: Download windows artifacts
        if: success()
        uses: actions/download-artifact@master
        with:
          name: windows-latest
          path: binaries/windows

      - name: Move artifacts
        if: success()
        run: |
          mkdir -p bin
          mv binaries/darwin/bin.exe bin/graphql-ppx-darwin-x64.exe
          mv binaries/darwin-arm64/bin.exe bin/graphql-ppx-darwin-arm64.exe
          mv binaries/windows/bin.exe bin/graphql-ppx-win-x64.exe
          mv binaries/linux/bin.exe bin/graphql-ppx-linux-x64.exe

      - name: Publish
        if: success() && github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/')
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN_JAAP }}

      - name: Publish Prerelease
        if: success() && github.event_name != 'pull_request' && !startsWith(github.ref, 'refs/tags/')
        run: |
          npm version prerelease -preid $(git rev-parse --short HEAD) -no-git-tag-version
          npm publish --tag=dev
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN_JAAP }}
